From 90a3222899da7f345e711da3fdc8c07feee8c880 Mon Sep 17 00:00:00 2001
From: Madi Juby <madelynj@amazon.com>
Date: Wed, 5 Oct 2022 13:07:22 -0700
Subject: [PATCH 13/14] Clear player info on user sign out

---
 .../TemplateRuntime.h                         | 19 +++++--
 .../TemplateRuntime/src/CMakeLists.txt        |  3 +-
 .../TemplateRuntime/src/TemplateRuntime.cpp   | 52 ++++++++++++-------
 3 files changed, 52 insertions(+), 22 deletions(-)

diff --git a/modules/Alexa/SmartScreenCapabilityAgents/TemplateRuntime/include/TemplateRuntimeCapabilityAgent/TemplateRuntime.h b/modules/Alexa/SmartScreenCapabilityAgents/TemplateRuntime/include/TemplateRuntimeCapabilityAgent/TemplateRuntime.h
index 21676cf..1e20baa 100644
--- a/modules/Alexa/SmartScreenCapabilityAgents/TemplateRuntime/include/TemplateRuntimeCapabilityAgent/TemplateRuntime.h
+++ b/modules/Alexa/SmartScreenCapabilityAgents/TemplateRuntime/include/TemplateRuntimeCapabilityAgent/TemplateRuntime.h
@@ -34,6 +34,7 @@
 #include <AVSCommon/Utils/RequiresShutdown.h>
 #include <AVSCommon/Utils/Threading/Executor.h>
 #include <AVSCommon/Utils/Timing/Timer.h>
+#include <RegistrationManager/CustomerDataHandler.h>
 
 #include "SmartScreenSDKInterfaces/ActivityEvent.h"
 #include "SmartScreenSDKInterfaces/AudioPlayerInfo.h"
@@ -63,6 +64,7 @@ class TemplateRuntime
         , public alexaClientSDK::avsCommon::sdkInterfaces::RenderPlayerInfoCardsObserverInterface
         , public alexaClientSDK::avsCommon::sdkInterfaces::CapabilityConfigurationInterface
         , public alexaClientSDK::avsCommon::sdkInterfaces::DialogUXStateObserverInterface
+        , public alexaClientSDK::registrationManager::CustomerDataHandler
         , public std::enable_shared_from_this<TemplateRuntime> {
 public:
     /**
@@ -72,6 +74,7 @@ public:
      * RenderPlayerInfoCardsProviders.
      * @param focusManager The object to use for acquire and release focus.
      * @param exceptionSender The object to use for sending AVS Exception messages.
+     * @param customerDataManager The @c CustomerDataManager object that tracks components managing customer data.
      * @return @c nullptr if the inputs are not defined, else a new instance of @c TemplateRuntime.
      */
     static std::shared_ptr<TemplateRuntime> createTemplateRuntime(
@@ -79,7 +82,8 @@ public:
             alexaClientSDK::avsCommon::sdkInterfaces::RenderPlayerInfoCardsProviderRegistrarInterface>&
             renderPlayerInfoCardsInterfaces,
         std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::FocusManagerInterface> focusManager,
-        std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::ExceptionEncounteredSenderInterface> exceptionSender);
+        std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::ExceptionEncounteredSenderInterface> exceptionSender,
+        std::shared_ptr<alexaClientSDK::registrationManager::CustomerDataManagerInterface> customerDataManager);
 
     /**
      * Create an instance of @c TemplateRuntime.
@@ -88,6 +92,7 @@ public:
      * observer of changes for RenderPlayerInfoCards.
      * @param focusManager The object to use for acquire and release focus.
      * @param exceptionSender The object to use for sending AVS Exception messages.
+     * @param customerDataManager The @c CustomerDataManager object that tracks components managing customer data.
      * @return @c nullptr if the inputs are not defined, else a new instance of @c TemplateRuntime.
      */
     static std::shared_ptr<TemplateRuntime> create(
@@ -95,7 +100,8 @@ public:
             std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::RenderPlayerInfoCardsProviderInterface>>&
             renderPlayerInfoCardsInterfaces,
         std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::FocusManagerInterface> focusManager,
-        std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::ExceptionEncounteredSenderInterface> exceptionSender);
+        std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::ExceptionEncounteredSenderInterface> exceptionSender,
+        std::shared_ptr<alexaClientSDK::registrationManager::CustomerDataManagerInterface> customerDataManager);
 
     /**
      * Destructor.
@@ -137,6 +143,11 @@ public:
     getCapabilityConfigurations() override;
     /// @}
 
+    /// @name CustomerDataHandler Functions
+    /// @{
+    void clearData() override;
+    /// @}
+
     /**
      * This function adds an observer to @c TemplateRuntime so that it will get notified for renderTemplateCard or
      * renderPlayerInfoCard.
@@ -224,13 +235,15 @@ private:
      * @param renderPlayerInfoCardsInterfaces A set of objects to use for subscribing @c TemplateRuntime as an
      * observer of changes for RenderPlayerInfoCards.
      * @param exceptionSender The object to use for sending AVS Exception messages.
+     * @param customerDataManager The @c CustomerDataManager object that tracks components managing customer data.
      */
     TemplateRuntime(
         const std::unordered_set<
             std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::RenderPlayerInfoCardsProviderInterface>>&
             renderPlayerInfoCardsInterfaces,
         std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::FocusManagerInterface> focusManager,
-        std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::ExceptionEncounteredSenderInterface> exceptionSender);
+        std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::ExceptionEncounteredSenderInterface> exceptionSender,
+        std::shared_ptr<alexaClientSDK::registrationManager::CustomerDataManagerInterface> customerDataManager);
 
     // @name RequiresShutdown Functions
     /// @{
diff --git a/modules/Alexa/SmartScreenCapabilityAgents/TemplateRuntime/src/CMakeLists.txt b/modules/Alexa/SmartScreenCapabilityAgents/TemplateRuntime/src/CMakeLists.txt
index 4621f0a..6c76669 100644
--- a/modules/Alexa/SmartScreenCapabilityAgents/TemplateRuntime/src/CMakeLists.txt
+++ b/modules/Alexa/SmartScreenCapabilityAgents/TemplateRuntime/src/CMakeLists.txt
@@ -6,9 +6,10 @@ add_library(SmartScreenTemplateRunTime SHARED
 target_include_directories(SmartScreenTemplateRunTime
     PUBLIC "${SmartScreenTemplateRunTime_SOURCE_DIR}/include"
         "${SmartScreenSDKInterfaces_SOURCE_DIR}/include"
+        "${RegistrationManager_SOURCE_DIR}/include"
         "${ASDK_INCLUDE_DIRS}")
 
-target_link_libraries(SmartScreenTemplateRunTime "${ASDK_LDFLAGS}" SmartScreenSDKInterfaces)
+target_link_libraries(SmartScreenTemplateRunTime "${ASDK_LDFLAGS}" SmartScreenSDKInterfaces RegistrationManager)
 
 
 # install target
diff --git a/modules/Alexa/SmartScreenCapabilityAgents/TemplateRuntime/src/TemplateRuntime.cpp b/modules/Alexa/SmartScreenCapabilityAgents/TemplateRuntime/src/TemplateRuntime.cpp
index 6ddcf71..c3eadaa 100644
--- a/modules/Alexa/SmartScreenCapabilityAgents/TemplateRuntime/src/TemplateRuntime.cpp
+++ b/modules/Alexa/SmartScreenCapabilityAgents/TemplateRuntime/src/TemplateRuntime.cpp
@@ -107,17 +107,19 @@ std::shared_ptr<TemplateRuntime> TemplateRuntime::createTemplateRuntime(
     const std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::RenderPlayerInfoCardsProviderRegistrarInterface>&
         renderPlayerInfoCardsProviderRegistrar,
     std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::FocusManagerInterface> focusManager,
-    std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::ExceptionEncounteredSenderInterface> exceptionSender) {
-    if (!renderPlayerInfoCardsProviderRegistrar || !focusManager || !exceptionSender) {
+    std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::ExceptionEncounteredSenderInterface> exceptionSender,
+    std::shared_ptr<alexaClientSDK::registrationManager::CustomerDataManagerInterface> customerDataManager) {
+    if (!renderPlayerInfoCardsProviderRegistrar || !focusManager || !exceptionSender || !customerDataManager) {
         ACSDK_ERROR(LX("createFailed")
                         .d("isRenderPlayerInfoCardsProviderRegistrarNull", !renderPlayerInfoCardsProviderRegistrar)
                         .d("isFocusManagerNull", !focusManager)
-                        .d("isExceptionSenderNull", !exceptionSender));
+                        .d("isExceptionSenderNull", !exceptionSender)
+                        .d("isCustomerDataManagerNull", !customerDataManager));
         return nullptr;
     }
 
     auto providers = renderPlayerInfoCardsProviderRegistrar->getProviders();
-    return TemplateRuntime::create(providers, focusManager, exceptionSender);
+    return TemplateRuntime::create(providers, focusManager, exceptionSender, customerDataManager);
 }
 
 std::shared_ptr<TemplateRuntime> TemplateRuntime::create(
@@ -125,7 +127,8 @@ std::shared_ptr<TemplateRuntime> TemplateRuntime::create(
         std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::RenderPlayerInfoCardsProviderInterface>>&
         renderPlayerInfoCardInterface,
     std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::FocusManagerInterface> focusManager,
-    std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::ExceptionEncounteredSenderInterface> exceptionSender) {
+    std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::ExceptionEncounteredSenderInterface> exceptionSender,
+    std::shared_ptr<alexaClientSDK::registrationManager::CustomerDataManagerInterface> customerDataManager) {
     if (!focusManager) {
         ACSDK_ERROR(LX("createFailed").d("reason", "nullFocusManager"));
         return nullptr;
@@ -135,8 +138,14 @@ std::shared_ptr<TemplateRuntime> TemplateRuntime::create(
         ACSDK_ERROR(LX("createFailed").d("reason", "nullExceptionSender"));
         return nullptr;
     }
+
+    if (!customerDataManager) {
+        ACSDK_ERROR(LX("createFailed").d("reason", "nullCustomerDataManager"));
+        return nullptr;
+    }
+
     std::shared_ptr<TemplateRuntime> templateRuntime(
-        new TemplateRuntime(renderPlayerInfoCardInterface, focusManager, exceptionSender));
+        new TemplateRuntime(renderPlayerInfoCardInterface, focusManager, exceptionSender, customerDataManager));
 
     if (!templateRuntime->initialize()) {
         ACSDK_ERROR(LX("createFailed").d("reason", "Initialization error."));
@@ -295,9 +304,11 @@ TemplateRuntime::TemplateRuntime(
         std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::RenderPlayerInfoCardsProviderInterface>>&
         renderPlayerInfoCardsInterfaces,
     std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::FocusManagerInterface> focusManager,
-    std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::ExceptionEncounteredSenderInterface> exceptionSender) :
+    std::shared_ptr<alexaClientSDK::avsCommon::sdkInterfaces::ExceptionEncounteredSenderInterface> exceptionSender,
+    std::shared_ptr<alexaClientSDK::registrationManager::CustomerDataManagerInterface> customerDataManager) :
         CapabilityAgent{NAMESPACE, exceptionSender},
         RequiresShutdown{"TemplateRuntime"},
+        CustomerDataHandler{std::move(customerDataManager)},
         m_activeNonPlayerInfoType{NonPlayerInfoDisplayType::NONE},
         m_focus{FocusState::NONE},
         m_state{smartScreenSDKInterfaces::State::IDLE},
@@ -515,7 +526,8 @@ void TemplateRuntime::executeAudioPlayerInfoUpdates(
                      .d("audioItemId", context.audioItemId)
                      .d("offset", context.offset.count())
                      .d("audioPlayerState", state)
-                     .d("isNonPlayerInfoCardDisplayed", NonPlayerInfoDisplayType::NONE != m_activeNonPlayerInfoType));
+                     .d("isNonPlayerInfoCardDisplayed", NonPlayerInfoDisplayType::NONE != m_activeNonPlayerInfoType)
+                     .d("isCurrentTokenEmpty",  m_playerInfoCardToken.empty()));
     if (alexaClientSDK::avsCommon::avs::PlayerActivity::IDLE == state ||
         alexaClientSDK::avsCommon::avs::PlayerActivity ::BUFFER_UNDERRUN == state) {
         /*
@@ -525,6 +537,14 @@ void TemplateRuntime::executeAudioPlayerInfoUpdates(
         return;
     }
 
+    if (PlayerActivity::STOPPED == state && m_playerInfoCardToken.empty()) {
+        /**
+         * If we're stopping playback after clearing the card, don't display it again.
+         */
+        ACSDK_DEBUG3(LX("executeAudioPlayerInfoUpdates").m("Ignoring update. m_playerInfoCardToken was already cleared"));
+        return;
+    }
+
     if (!context.mediaProperties) {
         ACSDK_ERROR(LX("executeAudioPlayerInfoUpdatesFailed").d("reason", "nullRenderPlayerInfoCardsInterface"));
         return;
@@ -542,9 +562,6 @@ void TemplateRuntime::executeAudioPlayerInfoUpdates(
          */
         return;
     }
-    auto isStoppedFromPlaying =
-        PlayerActivity::PLAYING == m_audioPlayerInfo[currentRenderPlayerInfoCardsProvider].audioPlayerState &&
-        PlayerActivity::STOPPED == state;
 
     m_audioPlayerInfo[currentRenderPlayerInfoCardsProvider].audioPlayerState = state;
     m_audioPlayerInfo[currentRenderPlayerInfoCardsProvider].offset = context.offset;
@@ -590,13 +607,7 @@ void TemplateRuntime::executeAudioPlayerInfoUpdates(
 
         auto playerInfoDirective = m_audioItemsInExecution[currentRenderPlayerInfoCardsProvider].directive;
 
-        if (isStoppedFromPlaying && m_playerInfoCardToken.empty()) {
-            /**
-             * If we're stopping playback after clearing the card, don't display it again.
-             */
-            return;
-        } else if (
-            m_playerInfoCardToken.empty() ||
+        if (m_playerInfoCardToken.empty() ||
             m_playerInfoCardToken != m_audioItemsInExecution[currentRenderPlayerInfoCardsProvider].audioItemId) {
             /**
              * Only acquire visual focus for displaying the card if we're not presenting one already or
@@ -961,6 +972,11 @@ std::unordered_set<std::shared_ptr<alexaClientSDK::avsCommon::avs::CapabilityCon
     return m_capabilityConfigurations;
 }
 
+void TemplateRuntime::clearData() {
+    ACSDK_DEBUG5(LX(__func__));
+    forceClearPlayerInfoCard();
+}
+
 }  // namespace templateRuntime
 }  // namespace smartScreenCapabilityAgents
 }  // namespace alexaSmartScreenSDK
-- 
2.36.0

