$header

//
// Enum definition:
//    $type.symbol
//

std::string toString($type.name value) {
    switch( value ) {
        #for $next in $type.get_value_names()
        case $type.name::$next: return "$next";
        #end for
    }
    throw std::runtime_error("invalid${type.name}Type");
}

$type.name to${type.name}(const std::string& value) {
    #for $next in $type.get_value_names()
    if( ::aasb::utils::string::equal( value, "$next", false ) ) {
        return $type.name::$next;
    }
    #end for
    throw std::runtime_error("invalid${type.name}Type");
}

void to_json(nlohmann::json& j, const $type.name& c) {
    j = toString(c);
}

void from_json(const nlohmann::json& j, $type.name& c) {
    c = to${type.name}(j);
}

$footer
